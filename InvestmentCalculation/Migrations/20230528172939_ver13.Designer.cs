// <auto-generated />
using System;
using InvestmentCalculation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvestmentCalculation.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20230528172939_ver13")]
    partial class ver13
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.BusinessAccounting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("BusinessAccountingType")
                        .HasColumnType("integer")
                        .HasColumnName("business_accounting_type");

                    b.Property<float>("Cost")
                        .HasColumnType("real")
                        .HasColumnName("cost");

                    b.HasKey("Id");

                    b.ToTable("BusinessAccountings");
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.Calculation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<float>("BusinessAccountingCost")
                        .HasColumnType("real")
                        .HasColumnName("business_accounting_cost");

                    b.Property<int>("CountOfWorkers")
                        .HasColumnType("integer")
                        .HasColumnName("company_name");

                    b.Property<string>("EconomyBranchId")
                        .HasColumnType("text");

                    b.Property<int>("IndustrialArea")
                        .HasColumnType("integer")
                        .HasColumnName("industrial_area");

                    b.Property<string>("JurisprudenceCompanyFormId")
                        .HasColumnType("text");

                    b.Property<float>("MachineCost")
                        .HasColumnType("real")
                        .HasColumnName("machine_cost");

                    b.Property<int>("MeanSalary")
                        .HasColumnType("integer")
                        .HasColumnName("mean_salary");

                    b.Property<string>("MoscowDistrictId")
                        .HasColumnType("text");

                    b.Property<string>("PatentBusinessesId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectUserId")
                        .HasColumnType("text");

                    b.Property<float>("RegistrationStateTax")
                        .HasColumnType("real")
                        .HasColumnName("registration_state_tax");

                    b.Property<float>("RentCost")
                        .HasColumnType("real")
                        .HasColumnName("rent_cost");

                    b.Property<int>("TaxType")
                        .HasColumnType("integer")
                        .HasColumnName("tax_type");

                    b.Property<float>("TotalInvest")
                        .HasColumnType("real");

                    b.Property<float>("TotalInvestment")
                        .HasColumnType("real")
                        .HasColumnName("total_investment");

                    b.Property<float>("WorkersCost")
                        .HasColumnType("real")
                        .HasColumnName("workers_cost");

                    b.HasKey("Id");

                    b.HasIndex("EconomyBranchId");

                    b.HasIndex("JurisprudenceCompanyFormId");

                    b.HasIndex("MoscowDistrictId");

                    b.HasIndex("PatentBusinessesId");

                    b.HasIndex("ProjectUserId");

                    b.ToTable("Calculations");
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.EconomyBranch", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch_name");

                    b.Property<float>("MeanAnotherTaxes")
                        .HasColumnType("real")
                        .HasColumnName("mean_land_rent_tax");

                    b.Property<float>("MeanAreaRentTax")
                        .HasColumnType("real")
                        .HasColumnName("mean_land_tax");

                    b.Property<float>("MeanMoscowTax")
                        .HasColumnType("real")
                        .HasColumnName("mean_moscow_tax");

                    b.Property<float>("MeanPersonalIncomeTax")
                        .HasColumnType("real")
                        .HasColumnName("mean_personal_income_tax");

                    b.Property<float>("MeanProfitTax")
                        .HasColumnType("real")
                        .HasColumnName("mean_profit_tax");

                    b.Property<float>("MeanPropertyTax")
                        .HasColumnType("real")
                        .HasColumnName("mean_property_tax");

                    b.Property<float>("MeanSalary")
                        .HasColumnType("real")
                        .HasColumnName("mean_salary");

                    b.Property<float>("MeanTransportTax")
                        .HasColumnType("real")
                        .HasColumnName("mean_transport_tax");

                    b.Property<float>("MeanWorkersCount")
                        .HasColumnType("real")
                        .HasColumnName("mean_workers_count");

                    b.HasKey("Id");

                    b.ToTable("EconomyBranches");
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.JurisprudenceCompanyForm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("JurisprudenceCompanyFormType")
                        .HasColumnType("integer")
                        .HasColumnName("jurisprudence_company_form_type");

                    b.Property<float>("RegistrationStateTax")
                        .HasColumnType("real")
                        .HasColumnName("registration_state_tax");

                    b.HasKey("Id");

                    b.ToTable("JurisprudenceCompanyForms");
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.MoscowDistrict", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district_name");

                    b.Property<float>("MeanPricePerSquareMeter")
                        .HasColumnType("real")
                        .HasColumnName("mean_price_per_square_meter");

                    b.HasKey("Id");

                    b.ToTable("MoscowDistricts");
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.PatentBusinesses", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<float>("MeanPossibleProfit")
                        .HasColumnType("real")
                        .HasColumnName("mean_possible_profit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("PatentBusinesses");
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.ProjectUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("CityName")
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inn");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text")
                        .HasColumnName("organization_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PositionInOrganization")
                        .HasColumnType("text")
                        .HasColumnName("position_in_organization");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserEconomyBranchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_first_name");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_last_name");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserThirdName")
                        .HasColumnType("text")
                        .HasColumnName("user_third_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserEconomyBranchId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InvestmentCalculation.Model.Machine", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("MachineType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("machine_type");

                    b.Property<float>("MeanPrice")
                        .HasColumnType("real")
                        .HasColumnName("mean_price");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("InvestmentCalculation.Model.MachineRequestInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CalculationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MachineCount")
                        .HasColumnType("integer")
                        .HasColumnName("machine_count");

                    b.Property<string>("MachineId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CalculationId");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineRequestInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.Calculation", b =>
                {
                    b.HasOne("InvestmentCalculation.Data.Entities.EconomyBranch", "EconomyBranch")
                        .WithMany()
                        .HasForeignKey("EconomyBranchId");

                    b.HasOne("InvestmentCalculation.Data.Entities.JurisprudenceCompanyForm", "JurisprudenceCompanyForm")
                        .WithMany()
                        .HasForeignKey("JurisprudenceCompanyFormId");

                    b.HasOne("InvestmentCalculation.Data.Entities.MoscowDistrict", "MoscowDistrict")
                        .WithMany()
                        .HasForeignKey("MoscowDistrictId");

                    b.HasOne("InvestmentCalculation.Data.Entities.PatentBusinesses", "PatentBusinesses")
                        .WithMany()
                        .HasForeignKey("PatentBusinessesId");

                    b.HasOne("InvestmentCalculation.Data.Entities.ProjectUser", "ProjectUser")
                        .WithMany("Calculations")
                        .HasForeignKey("ProjectUserId");

                    b.Navigation("EconomyBranch");

                    b.Navigation("JurisprudenceCompanyForm");

                    b.Navigation("MoscowDistrict");

                    b.Navigation("PatentBusinesses");

                    b.Navigation("ProjectUser");
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.ProjectUser", b =>
                {
                    b.HasOne("InvestmentCalculation.Data.Entities.EconomyBranch", "UserEconomyBranch")
                        .WithMany()
                        .HasForeignKey("UserEconomyBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEconomyBranch");
                });

            modelBuilder.Entity("InvestmentCalculation.Model.MachineRequestInfo", b =>
                {
                    b.HasOne("InvestmentCalculation.Data.Entities.Calculation", "Calculation")
                        .WithMany("MachineRequestInfos")
                        .HasForeignKey("CalculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentCalculation.Model.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId");

                    b.Navigation("Calculation");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InvestmentCalculation.Data.Entities.ProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InvestmentCalculation.Data.Entities.ProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentCalculation.Data.Entities.ProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InvestmentCalculation.Data.Entities.ProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.Calculation", b =>
                {
                    b.Navigation("MachineRequestInfos");
                });

            modelBuilder.Entity("InvestmentCalculation.Data.Entities.ProjectUser", b =>
                {
                    b.Navigation("Calculations");
                });
#pragma warning restore 612, 618
        }
    }
}
